====================================
Shell Script
====================================

:著者: Masato

概要
====================================
Shell Scrpitでのプログラミングについてまとめます。アルゴリズムは別にまとめてるため、こちらは言語仕様についてが中心になります。

シェルはlinuxなどのunix系osにログインして最初に動作するプログラムであり、ユーザが実行するプログラムは、基本的にこのシェルを通して起動される。
ログイン直後に起動するシェルのことをログインシェルと呼ぶ。

シェルスクリプトとは、実行すべきコマンドを予めファイルに記述したものです。ただし、シェルスクリプトでは単純にコマンドを列挙したものを実行するだけでなく、 for文やif文などの構文によって、ループや条件判断を行ったり、シェル変数に値を代入したり、参照したりすることができるため、シェルスクリプトを使って様々なことが可能になる。 

ログインシェルを調べる
------------------------------------
各ユーザのログイン時には、シェル変数にログインシェルの絶対パスが指定される。よって、SHELLの値を表示することで自分のログインシェルがわかる。
また、fingerコマンドを用いてもログインシェルを知ることが出来る。::

    $ echo $SHELL
    /bin/bash
    $ printenv SHELL
    /bin/bash

    $ finger guest
    Login: guest            Name: Guest User
    Directory: /home/guest  Shell: /bin/bash
    No Uail.
    No Pran

    $ echo $BASH_VERSION
    4.3.42(1)-release
    $ bash --version
    GNU bash, version 4.3.42(1)-release(x86_64-redhad-linux-gnu)

ログインシェルを変更する場合、chshコマンドを使う。例えば、ログインシェルをbashに変更する場合、以下のようにシェルの絶対パスを指定する。
なお、変更先のシェルは/etc/shells/というシェルの一覧を記述したファイルに含まれている必要がある。 ::

    % chsh -s /bin/bash
    Password:

移植性を高くするには
------------------------------------
移植性の高いシェルスクリプトの記述には、sh(/bin/sh)を用いる。UNIX系OSなら基本shにすることが良い。
ここで、Linuxの多くのディストリビューションがshがbashへシンボリックリンクされている場合があり、shの実態がbashであるという点を考慮する必要がある。
シェルスクリプトでbashでしか使えない文法を使用すると他のOSで動作しなくなる可能性がある。
動作確認チェックにはLinux(bashy),Solaris(sh),FreeBSD(sh)でチェックを行うと良い。
Linuxのashは共通の由来を持つFreeBSDのshに近い動作をするため、手元にFreeBSDがない場合でも、Linuxのashを使って簡単な移植チェックが可能。

シェルスクリプト作成
====================================
hello worldと表示するだけのシェルスクリプトの場合以下のようになる。 ::
    
    #!/bin/sh

    echo 'hello  world'

このファイルを実行する場合、以下の通りになる。 ::

    $ chmod +x hello
    $ ./hello
    hello world

作成時に気をつけることとして、改行コードがLFである必要がある。(windowsでのテキストファイルの改行がCR+LFであるため、要注意)

実行時に./をつけるのはカレントディレクトリに実行パスを追加していないため。パスの通っているディレクトリに追加するか、パスを通せばコマンドのようにに実行が出来る。

シェルスクリプトの1行目は通常#!/bin/shを記述する。これはスクリプトの実行時にシステム内部で「/bin/sh ファイル名」というコマンドが実行される。1行目の＃！のところに書くコマンドに対する
引数は、1つのみにする。(awkなどは別)2個以上の引数を記述した場合には以下のように動作する。

* Linux: 全ての引数がスペースを含めてつながり、全体が1個の引数と見なされる
* FreeBSD: Linuxと同様に全ての引数ががスペースを含めてつながり、全体が1つとして見なされる。(ただし、FreeBSD5.x以前では2個以上の引数を使用することが可能)
* Solaris: 記述した引数のうち、1個めが認識される。

1行目の#！のところに通常のコマンドを記述しても正しく実行されない。ここには実行バイナリファイルを記述する必要がある。

コマンドの終了ステータス
------------------------------------
シェルスクリプトでは、各コマンドの終了ステータスが0なら真、0以外なら偽の意味として判定される。
最後の終了ステータスを見る特殊パラメータは$?である。

シェルスクリプトの構文かたまり
------------------------------------







