====================================
Applications on Linux
====================================

:著者: Masato

概要
====================================
Linux上で動かすアプリケーションの使い方、コツについて載せていきます。

shell
====================================

端末出力をコピー
------------------------------------
xselコマンドを使うと内容がクリップボードと共有できる。::

    xsel --clipboard --input
    xsel --clipboard --output

プロンプトの表示を変更するには
------------------------------------
ログインして以下のように表示されるのがプロンプトです。::

    [swallow@arch~]$

プロンプトはシェル似よって表示が若干異なるが、bashのプロンプト表示は **$** が一般ユーザー、**#** がスーパーユーザー(root)となる。
この表示の制御はPS1という環境変数によって設定されている。この環境変数PS1の値を変更すれば、オリジナルのプロンプトを表示させることができ、
その設定にはexportコマンドを使用する。

設定値には、以下にような特殊な文字が設定出来る。

======= ============================
\d      日付
\h      ホスト名（ドメイン名なし）
\H      ホスト名（ドメイン名あり）
\s      シェルの名前
\t      時間（24時間制 HH:MM:SS形式)
\T      時間（12時間制 HH:MM:SS形式)
\@      時間（12時間制 HH:MM AM/PM形式)
\u      ユーザ名
\w      カレントディレクトリ
\W      カレントディレクトリのベース名
\!      コマンド履歴番号を表示
\#      コマンドのコマンド番号
\$      rootなら#、それ以外なら$を表示
\\      バックスラッシュ
======= ============================

現在の環境変数PS1の値を表示する。::

    [swallow@arch~]$ echo "$PS1"
    [\u@\h\W]

現在の環境変数PS1の値を表示する。::

    [swallow@arch~]$ export PS1="[\u@\t\w]\$ "
    ↑最後は半角スペースを入れる。

これは再ログインすると設定が元に戻ってしまうので、永続した設定にするには、.bashrcにさっきのものを記述する。

ターミナル上でのショートカット
------------------------------------

一覧
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
=========   ===================================================================================================================================================================================================================
Ctrl + a    カーソルを行頭へ移動する
Ctrl + e    カーソルを行末へ移動する
Ctrl + d    現在の入力行に何か入力されている場合は、カーソルの後ろにある一文字を消去する （Deleteキーと同じ働きをする）別のユーザにログインしている場合は、別のユーザからログアウトする （「exit」コマンドと同じ働きをする）
Ctrl + h    カーソルの前にある一文字を消去する（Backspaceキーと同じ働きをする）
Ctrl + u    現在入力中の行をクリアする
Ctrl + l    ターミナルをクリアする（「clear」コマンドと同じ働きをする）
Ctrl + k    カーソルより後ろにある文字列を切り取る
Ctrl + y    切り取った文字列を貼り付ける
Ctrl + r    コマンドの履歴を表示する
Ctrl + f    →キーを押すのと同じ働きをする
Ctrl + b    ←キーを押すのと同じ働きをする
Ctrl + p    ↑キーを押すのと同じ働きをする
Ctrl + n    ↓キーを押すのと同じ働きをする 
=========   ===================================================================================================================================================================================================================

コピー & ペースト
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
コピーしたい文字列をマウスで選択するとコピーできます。ペーストしたいときは、3ボタンマウスの真ん中のボタンを押すか、「Shift + Insert」キーを押せばペーストできます。


Vim
====================================

画面分割
------------------------------------
ウィンドウ分割
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

=========   ===========================
項目名      デフォルト  
=========   ===========================
水平分割    :split  
垂直分割    :vsplit     
=========   ===========================

ウィンドウ移動
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

=========   ===========================
項目名      デフォルト  
=========   ===========================
左に移動    <C-w>h  
下に移動    <C-w>j  
上に移動    <C-w>k  
右に移動    <C-w>l  
次に移動    <C-w>w
=========   ===========================

ウィンドウそのものを移動
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

=========   ===========================
項目名      デフォルト  
=========   ===========================
左に移動    <C-w>H  
下に移動    <C-w>J  
上に移動    <C-w>K  
右に移動    <C-w>L  
回転        <C-w>r
=========   ===========================

カレントウィンドウの大きさを変更
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

===============   ===========================
項目名               デフォルト  
===============   ===========================
縦に最大化           <C-w>_  
横に最大化           <C-w>パイプ     
大きさを揃える       <C-w>= 
幅を増やす           <C-w>>  
幅を減らす           <C-w><  <
高さを増やす         <C-w>+  +
高さを減らす         <C-w>-  
===============   ===========================

タブ関連
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

==============   ===========================
項目名              デフォルト  
==============   ===========================
新規タブ            :tabnew     
次のタブに切替      gt  
前のタブに切替      gT  
==============   ===========================

閉じる
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

==================   ===========================
項目名                  デフォルト  
==================   ===========================
ウィンドウを閉じる      :q  
バッファを閉じる        :bd
==================   ===========================

http://qiita.com/tekkoc/items/98adcadfa4bdc8b5a6ca


Xmlファイルの整形
------------------------------------
    :%s/></>\r</g | filetype indent on | setf xml | normal gg=G


zip
====================================

zipコマンドでディレクトリをzip化する
------------------------------------
    $ zip -r 生成するzipファイル名 zip化するディレクトリ

github
====================================
事前知識
------------------------------------
リポジトリとは、ファイルやディレクトリの状態を保存する場所である。
更履歴を管理したいディレクトリなどをリポジトリの管理下に置くことで、そのディレクトリ内のファイルなどの変更履歴を記録することができる。

* ローカルリポジトリ・・・ 自分のマシン内にあるリポジトリ
* リモートリポジトリ・・・ サーバなどネットワーク上にある。

基本的にローカルリポジトリで作業を行い、その作業内容をリモートポジトリへプッシュする流れで行う。

* コミット・・・ファイルの追加や変更の履歴をリポジトリに保存すること
* プッシュ・・・ファイルの追加や変更の履歴をリモートリポジトリにアップロードするための操作

ブランチ(branch)とは現在リリースしているバージョンのメンテナンスをしながら新たな機能の追加やバグ修正を平行して行うため、
複数のバージョン管理を行うためにbranchがある。branchは履歴の流れを分岐して記録していくものであり、分岐したブランチは、他のブランチの影響を受けないため、
同じリポジトリ内でそれぞれの開発を行える。

githubとssh接続
------------------------------------
ssh公開鍵を作成するために、::

    $ ssh-keygen

を実行する。Enter passphraseと表示されるので、パスフレーズを入力する。(二回)

公開鍵を確認するために、::

    $ cat ~/.ssh/id_rsa.pub

を実行する。ssh-rsaから始まるめちゃくちゃな文字列が公開鍵であるので、これをまるごとコピーする。

GitHubサイトのアカウントセッティング画面上にSSH Keysという項目があるので、そこで、先ほどの鍵を追加する。
コピーしたものまるごと貼り付ける。

端末に戻り、gitにユーザ名を登録する。::

    $ git config --global user.name {username}
    $ git config --global user.mail {mail address}

登録状況を確認するには、::

    $ git config --global --list

GitHubでレポジトリを作成する。
------------------------------------
まずは、リポジトリを作成する。GitHubにログインした状態で、右下の「New Repository」ボタンを押す。
次に表示される画面で、「Repository name」の入力後に「Description」も入力する。

また、リポジトリの種類をPublicかPrivateを選択する。最後にリポジトリの中にあらかじめREADMEファイルを作成しておく場合は、
「Initialize this repository with a README」にチェックを入れる。.gitignoreやlicenseについては後で追加や変更ができるため、Noneとする。

必要項目の入力が終わり、「Create repository」ボタンをクリックするとリポジトリの作成は完了する。
次の画面でリモートリポジトリのアドレスが表示されるため、控えておく。

ローカルリポジトリ
------------------------------------
ローカルディレクトリを作成し、そこを初期化する。::

    mkdir hoge
    cd $_
    git init

「git init」コマンドはgitリポジトリを新たに作成するコマンドである。バージョン管理を行っていない既存のプロジェクトをgitリポジトリに変換する場合や、
空の新規リポジトリを作成して初期化する場合に使用する。このコマンドの実行によりカレントディレクトリをgitリポジトリに変換する。

GitHubのリモート先を指定
------------------------------------
foo を github のユーザ名、bar をプロジェクト名で、それぞれ置き換える。::

    $ git remote add origin git@github.com:foo/bar.git

ファイルの作成・変更・削除をgitのインデックスに追加する(git add)
------------------------------------------------------------------------
ファイルを追加したあと、gitのバージョン管理に追加するには、以下のコマンドでインデックスに追加する。::

    $ git add foo

インデックスとは、リポジトリにコミット準備をするために、変更内容を一時的に保存する場所である。

変更結果をローカルリポジトリにコミットする(git commit)
------------------------------------------------------------------------
インデックスに追加されたファイルをコミットする。
コミットとは、ファイルやディレクトリの追加や変更をリポジトリに記録する操作のことである。::

    git commit -m "add a new file"

これでリポジトリに対してファイルの追加が記録された。確認は以下の方法でできる。::

    git status

リモートリポジトリに反映される前に、リモートリポジトリの情報を追加する。
この情報はgithub所に表示されるリモートリポジトリのアドレスである。例として、::

    git remote add origin https://github.com/hoge/foo.git


ローカルリポジトリをプッシュしてリモートレポジトリへ反映させる(git push)
------------------------------------------------------------------------
ローカルリポジトリの変更をgithub上にあるリモートリポジトリに反映させるため、以下のようにする。::

    git push origin master

GitHubのユーザ名とパスワードを尋ねられるため、入力する。これが終わると、リモートレポジトリへ反映出来る。

GitHub新規リポジトリの場合
---------------------------------------------
以下転載::

    echo "# mydocs" >> README.md
    git init
    git add README.md
    git commit -m "first commit"
    git remote add origin https://github.com/Swall0w/mydocs.git
    git push -u origin master
