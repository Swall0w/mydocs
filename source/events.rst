====================================
イベント・勉強会関連
====================================

:著者: Masato

概要
====================================
参加したイベントや勉強会で学んだことをまとめていきます。あとで調べるメモ用。

みんなのPython勉強会#18
====================================
2016/11/09 @クリーク・アンド・リバー
テーマ : StaPy x ODSC Joint-Meetup

ODSC West参加報告　~シリコンバレーに行ってきました~
------------------------------------------------------------------------
辻真吾@tsjshg

ODSC(Open Data Science Community)はデータサイエンスより身近になることを目的として、アメリカ・ボストンから始まったコミュニティである。
Googleのサービスとして、TensorFlow playgroundがおもしろい。
Googleの佐藤さん「きゅうりの仕分け」形が悪いきゅうりをはじく
TensorFlowはCPUでもGPUなく、TPUを開発している。
ムーアの法則が崩れた今、ハードウェアを本格的に考えなくてはならない。そのため、シリコンバレーで次のコンピュータを模索している。
Kaggle機械学習モデルのコンペティションサイト

* 比較的簡単な分類の問題
* 誰がやっても同じような結果になる。認識精度が8割くらい。
* 難しいのはQ＆Aのような自然言語処理、半数くらい。
* 再現性のある機械学習モデル(解析)
* コード、データ、が必要　→　Dockerで管理

革新的なことをするには、楽観的に考えることが絶対に必要なんだ。そうでなければ、旅に出たりしない。

Pythonで始める機械学習
------------------------------------------------------------------------
福島 真太郎(株式会社トヨタIT開発センター)
python機械学習の本書いています。
Scikit-learnをたくさん使ってみるべし。クロスバリエーションや試験データ分割などたくさんのモジュールが配布されている。
ついでにjupyter nodebookを使ってプレゼンにまとめましょう。
UCI Machine Learning dataset

AITC オープンラボ「音の機械学習　入門編」
========================================================================
2017/02/28 @リコーITソリューションズ本社事業所 大会議室 (BLUE OCEAN))
講師:   松井　唯氏
        AITC　クラウド・テクノロジー活用部会メンバー
        富士通株式会社　

内容
-----------------------------------------------------------------------
人間は低周波500~1000Hz帯での変化には敏感だが、高周波帯8000Hz~8500Hzの差は鈍感
=> 「メルフィルタバンク」を用いて非線形にし、差を等長にする。
=> 離散コサイン変換を行うことでより特徴を取りやすく
=> メル周波数スケプトラム変換(MFCC)

音素推定

* その音がなんの音であるのかを特徴量から推定
* シンプルなものだとGMM(gausian mixed model)を用いるが、分類問題なので、最近はニューラルネットワークでやったりもする。

Chainer meetup #5
========================================================================
2017/06/10 @マイクロソフト

chainer v2.0
-----------------------------------------------------------------------
* 不整合があったAPIなどの変更
* 互換性がないものにしてはドキュメント
* API破壊に関しては参照　https://docs.chainer.org/en/stable/compatibility.html

もっとも大きな変更はcupyの変更
chainerの内部からCuPyを独立させた。
→ユーザーはコンフィグファイルを設定する必要がある。
コンフィグはグローバルになる。

ユーザーのインストールには
pip install cupy chainer

v1からv2はpip uninstall chainer <- cupyをクリーンにするため
docker関連はsudoでパスを通す必要になるので注意

新機能

* メモリ削減　FuntionがバックプロップのためにVariableを保持←いらないものものあるので、それをどうにか減らしたかった
VariableとFuntionを交互に参照するVariableNodeが実装 30%程度削減

* NumpyのアドバンスドインデックスをVariableで使えるようになった

* Optimizerがuser_ruleを適用し複雑案設定ができるようになった。

リポジトリの変更
頻繁にメジャーアップデート（開発(master)のブランチとリリースのブランチのみ）メジャーアップデートは12週間ごと

これからの予定？
* バックプロップのバックプロップ
* ドキュメントの改善
* Graph visualization toolkit

ChainerMNについて
---------------------

chainerMNはデータ並列の分散処理によって高速化するための追加パッケージ

通常のchainer
Forward Backward Optimiser

分散処理
Forward Backward All-Reduce Optimize

シングルノードとマルチノードの両方に対応

chainerMNの使い方
^^^^^^^^^^^^^^^^^^^^

* chainer (cupy and cuDNN)
* OpenMPI (cuda-awareのサポートを入れてコンパイルする。Ubuntunのはサポート入ってない）
* NVIDIA NCCL (make時にNVCC＿GENCODEの指定)
* MPI4py
* Cython

インストール
pip install chainermn

MPIを使うときには
mpiexec -n 4 python examples/mnist/train_mnist.py -g

動かない場合は http://chainermn.readthedocs.io/en/latest/installation/troubleshooting.html

最低限変更する点

* Communicatorの作榮と使用するGPUの指定
* GPUの指定の仕方変更
* optimizerの変更

やったほうがいいこと

* データの分配（上記のままだと、4つのワーカーで学習するため、4倍のバッチサイズとなる。分割して行うほうがいい）
* MultiNode Evaluatorの作成（そのままでも動かすことが出来るが、コミュニケーター用の評価クラスを使ったほうがいい）

注意することはPrintReportなどのExtensionは１つのワーカーだけ実行する
それぞれについて実行するとぐちゃぐちゃになる。

デフォルトのコミュニケーターで出来るが、高い性能を出したい場合には最適化したものを選ぶ


