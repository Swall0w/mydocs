====================================
考え方
====================================

:著者: Masato

概要
====================================
日々感じたことや大事にしていきたい考え方について徒然にまとめていきます。

引き継ぎ（ドキュメントの重要性）
====================================

引き継ぎものがないとは
------------------------------------
引き継ぎをちゃんとやらない人はビジネスパーソンとしての自覚が足りないと感じるし、仕事をしているにしても評価することができない。 **「引き継ぎがいらない」** が意味することは、本人が駄目であることを認めている。
仮に、引き継ぐことがないとすると、

* その本人が自分で工夫したこと、暗黙的な知的コツが全くない。
* 何も考えずに仕事をしていた。
* 全社最適視点、全プロジェクト視点がなく、自分仕事が片付けばいいと思っている。
* 他社への思いやりや仕事への愛情がない。

ということになる。また、「コツを完璧に文章化してある。」というケースもあるが、「どこに何が書いてあるのか」を丁寧に伝えないと、何が書いてあるのか分からないものになってしまう。「引き継ぎ資料の使い方を引き継ぐ」という感じに。

引き継ぎ力＝仕事力
------------------------------------
引き継ぎに必要な要素を考えてみると、かなりの超人である。

**1. 言語化能力**

引き継ぎで一番価値があるのは、「私は経験を積んだからできるが、引き継ぎ相手はできない」ことを、短期間で出来るようにするためにのアドバイスや情報である。つまり、自分が習得したコツを相手が分かるように言語化して伝える必要がある。

**2. 想像力、憑依力**

コツを相手が分かる形で伝えるのはなかなか難しい。
「初心者ならこういう状況に陥るだろうな」、
「この引き継ぎ相手なら、ここで躓くだろうな」
を想像したり、相手になってシミュレーションする力がないと、いい引き継ぎは出来ない。悪気はないのに、「特段、引き継ぐことはありません」という人はこの能力が決定的に足りない。

**3. 段取り、時間管理、リスク管理**

大抵の引き継ぎは、元々いた人が異動するなどで期限が決まっている。優れた引き継ぎは、期限に向けて着実に終わらせなければならない。突発の仕事が入ったので引き継ぎ作業は諦めるという訳にはいかない。
もちろん、自分の都合だけでなく、相手の理解スピードや割ける時間も計算にいれなければならない。

**4. 責任感、漢気、チームワーカーとしての心得**

想像力や段取り力が高い人でも、他人がいい仕事をする異に全く興味がなければ、きちんと引き継ぎをしない。

* 折角だから、自分が苦労したところを説明していこう
* 去るのは心苦しいが、せめてノウハウを残そう
* 理屈はともかく、他人がいい仕事をするのがうれしい。

といった、他者を思いやることができる心意気を持って、仕事をすることは大切である。損得じゃないのだけれど、長期的には損得にも響く。

**5. 構想力**

本来引き継ぎは引き継ぐ人の工夫や根性でやるものではなく、組織として引き継ぎを計画していかなければならない。 **「自然に引き継がれる」** が理想。組織が意識することは重要であるが、個人の能力として必要なのは、
「今後、このしごとは、誰が、どうやってやっていくのか？」を考える力、つまり構想力が必要である。

将来のために引き継ぐのだから、将来を見通す力が必要である。
<http://blogs.itmedia.co.jp/magic/2012/10/post-a14e.html>

Wikiに情報を書くときに守るべきルール
====================================

ルール
-----------------------------------

守るべきルールは、

    「このページについて」という欄をページの先頭に用意し、そのページの概要を1～2文で書く。

である。単純だが、強力で、きちんと守ろうとすると意外に面倒なルールである。

例えば、何かのインストール作業をメモしておきたい場合、「このページについて」欄には以下のような文章を書く。::
    
    ##　このページについて
    これは、システムAの開発環境を構築するために、Windows7にソフトウェアBをインストールした際のメモです。

    ## 手順
        ...

また、何かの新機能を実装したくて、事前に設計を検討した場合は、こんな感じで書きます。::

    ## このページについて

    これは、機能Cの設計についてチーム内で議論するために、個人的に作成した設計案です。設計の事前知識として、既存のソースコードを調査した結果も含めています。

    ##　設計案
        ...

ルールの目的
-----------------------------------
このルールを徹底する目的は、そのページを開いた人に **「このページに、自分が今知りたい情報がかかれているか？」を瞬時に判断するため** の情報をあたえることである。
wikiなどを普段使っている人なら、このページはこんなことが書いてあるんだろうなと思って読み始めたら、実は全然違うことが書いてあった、という経験があると思う。例えば、

* インストール手順書かと思って読んでいたら、インストール時に試したことを適当な順序で書いてあるだけのメモであった。書いてある手順を順に試していくと、途中で失敗してしまった。
* ある機能の設計に関するメモかと思ったら、単なる設計案のメモであり、最終的に実装されたソースコードと全く一致していなかった。

Wikiに色々まとめておくことは悪いことでないが、ただ、そのページがどういう状態なのかが明示されていないと、読み解いて、必要な情報ではなかったと判断する時間が無駄になる。
その結果、Wikiに書いてある情報自体を信用しなくなり、例え他に有益な情報が書いてあってもその情報は読まれないという状況を生む。

ページの先頭にただのメモであると明示してあれば、読み手が、 **「他に有益な情報が見当たらないから、これを頑張って読み取ろう」** と判断することも十分にありえ、
結果として、必要な情報がなくても、期待を裏切ることにはならない。

ルールを守るために
-----------------------------------

* ページの更新が終わった段階で、「このページについて」の内容を見直す。
* 「このページについて」から外れる内容が増えてきたら、別のページに分ける。
* 他人が書いた「このページについて」も直していい。

<http://iyoshiz.hatenablog.com/entry/2016/04/25/015644>

ハッカーなるには
====================================
Rob Flickernger LinuxサーバHacks

クラッカーは怠惰で無責任、なおかつあまり頭が良くない、本物のハッカーたちはほとんどそのように思っています。セキュリティを破れるかといって、ハッカーにはなれない、それは車の配線をショートさせてエンジンをかけることができても、
自動車技術者になれないのと全く同じだとハッカーたちは考えている。ハッカーとクラッカーの根本的な違いは、ハッカーはものをつくり、クラッカーは壊すということです。

ハッカーらしい態度
-----------------------------------
ハッカーはものを解決し、ものを作ります。また、自由および自由意志による相互協力の存在を信じている。ハッカーとして認められるには、この様な態度で取り組む必要がある。
そして、そのようにふるまうために、ハッカー的態度の重要性を心から信じなくてはならない。

とはいえ、ハッカー文化の中で認められるためだけにハッカー的態度を振る舞うと考えるのは的外れである。ハッカー的態度の重要さを信ずる人になるには、あなたにとって重要なことである。つまり、学ぶことを助け、
やる気を維持させるものになる。創造的な芸術はすべてそうであるが、もっとも効果的な達人への道は、達人のものの考えをまねることであり、知能的側面だけなく、感情的側面も含めてである。

これは、現代の禅詩にも見られる。::

    道をたどるには　道を目指せ
    師に続け　師とともに歩め
    師を見抜け 師となれ

したがって、ハッカーになりたいのなら、次のことを信仰するべきである。

1. このこの世は解決を待っている魅力的な問題であふれている
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ハッカーであることは楽しいが、楽しむには膨大な努力を必要とする。努力するにはやる気が必要である。ハッカーになるためには、問題を解決し、技術に磨きをかけ、知性を発揮することに対して興奮するようでなければならない。
生まれつきそのように感じるタイプでなければ、ハッカーになるためにはそういう人になる必要がある。

2. 同じ問題を2度も解決すべきではない
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
創造的な頭脳は貴重で、限りある資源である。解決すべき魅力的な新しい問題がそこかしこにあるのに、車輪の再発明をするような無駄をすべきではない。
ハッカーらしく振る舞うには、他のハッカーが思案する時間は貴重なものとして思わなければならない。であれば、他のハッカーたちがいつまでも古い問題に取り組む代わりに新たな問題を解決出来るよう、
情報を共有したり解決した問題の解決策を公開することは、ほとんど道徳上の義務である。
作り上げた成果のすべてを公開しなくてはならないと思う必要はない。とはいえ、他のハッカーから最も尊敬されるのは、成果を公開するハッカーである。

3. 退屈なこと、単調なことは悪である
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ハッカーは、退屈をしたりばかばかしい単純作業をするべきではない。そういう作業をしているときは、ハッカーにしか出来ないこと、つまり新たな問題の解決をしていないことになるからである。そのような無駄はあらゆる人にとって
損害となる。退屈なことや単調というのは、不愉快なだけでなく、実際の害悪である。

ハッカーらしく振る舞うには、このことを十分考慮する必要がある。自分自身のためだけでなく、あらゆる人のために、退屈な部分は可能な限り自動化して排除したいと考えなくてはならない。
例外として、ハッカーたちははたから見ると、反復的で退屈なことをしていることがあるが、これは頭の体操であったり、スキルの習得ややってみない限り経験できないことのためであったりする。しかし、それは好き好んでやっているのであって、
思考力がある人は誰であれ、退屈な状況を強要されるべきでない。

4. 自由は善である。
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ハッカーは本質的に反権威主義的である。あなたに命令出来る人間は、あなたが心を奪われている問題に取り組むことをやめようとするかもしれない。権威主義者の考えからいけば、大方呆れるほどバカらしい理由でやめさせようとする。
したがって、権威主義的な態度に気がついたら、あなたやハッカーたちの息が詰まらないように、どこであっても戦わなくてはならない。
これは、あらゆる権力と高層することとは異なる。子供たちは教育が必要であるし、犯罪者は拘束する必要がある。

権威主義者は検閲と機密を生きがいにしており、さらに自由意志による協力や情報の共有を疑っており、自身でコントロールできる「協力」だけを好む。そのため、ハッカーらしく振る舞うには、検閲や秘密主義、責任ある大人を屈服させる
実力行使や欺瞞にたいし、本能的に敵愾心をもつ必要がある。そして、信念に基づいた行動をとる意識がなければならない。

5. 態度は能力の代わりにならない
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ハッカーになるには、これまで述べたような態度をとるようにしなければならない。しかし、態度だけ手に入れてもハッカーにはなれない。態度だけで勝利するスポーツ選手はいないし、ロックスターになれるわけでもない。
ハッカーになるには、知性、実践、献身、勤勉が必要になる。

従って、態度を信用せず、各種の能力に対して敬意を払うことを身につけなければならない。ハッカーたちはハッカー気取りの連中のために時間を使うことはないが、その能力については崇拝を捧げる。さらに習得している人のほとんどいない
スキルが必要な能力はさらに評価される。頭の鋭さ、技、集中力を伴うスキルが必要な能力はさいこうである。

能力を崇拝するなら、自分の能力を進化させることを楽しめるし、勤勉さや献身といったことは退屈な仕事ではなく、ある種の非常に楽しい遊びになる。こうした態度はハッカーにつための生命線である。
